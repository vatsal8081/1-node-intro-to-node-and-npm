// 1 
// in every web app there are mainly 3 kinds of stracture which we can follow there are many other ways but they are just sub part of this 3 ways some how 
// in every app we create app using
// 1) returning json data from api from backend and other things in frontend
// 2) returning html from backend created by some templating engines in backend
// 3) returning html generated by some SSR frontend framework from backend

// 2
// now we show a very simple way how the json data is send from backend without any framework just basic node modules.
// now let see how we can send html from backend by seeing bery basic example how a templating engine works in it's core.

const http = require('http')
const fs = require('fs')
const url = require('url')


const server = http.createServer((req, res) => {

    // 3
    // we can use the built in url module to play with the req url and other urls
    // we have parse method which takes url and provides the dirent segments of url
    // check the console for parsed url you will better understand
    // then hit the /home?name=vatsal route

    console.log('parseed url', url.parse(req.url, true));

    const { query, pathname: pathName } = url.parse(req.url, true)

    if (pathName === '/home') {
        fs.readFile(`${__dirname}/home.html`, 'utf-8', (err, data) => {

            data = data.replace(/{{% userName %}}/g, query.name)
            data = data.replace(/{{% mathClass %}}/g, Math.random() > 0.5 ? "orange" : "blue")
            // hear we are using replace method with regex in string to find perticular trmplate string symbols and replacing it from all place where it found because we are using regex it will repalce all auccorance of the symbol in string no matter it's multiple time or single

            // and this way a templating engine works in it's core in very simple way and this way we can return dynamic html content form our backends.

            res.writeHead(200, { 'Content-type': 'text/html' })
            res.end(data)
        })
    }
    else {
        res.end('Page Not Found')
    }

})


server.listen(3000, '127.0.0.1', () => console.log('listrning on port: 3000'))

